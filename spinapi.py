# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _spinapi
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


PULSE_PROGRAM = _spinapi.PULSE_PROGRAM
FREQ_REGS = _spinapi.FREQ_REGS
PHASE_REGS = _spinapi.PHASE_REGS
TX_PHASE_REGS = _spinapi.TX_PHASE_REGS
PHASE_REGS_1 = _spinapi.PHASE_REGS_1
RX_PHASE_REGS = _spinapi.RX_PHASE_REGS
PHASE_REGS_0 = _spinapi.PHASE_REGS_0
COS_PHASE_REGS = _spinapi.COS_PHASE_REGS
SIN_PHASE_REGS = _spinapi.SIN_PHASE_REGS
DEVICE_SHAPE = _spinapi.DEVICE_SHAPE
DEVICE_DDS = _spinapi.DEVICE_DDS
ANALOG_ON = _spinapi.ANALOG_ON
ANALOG_OFF = _spinapi.ANALOG_OFF
TX_ANALOG_ON = _spinapi.TX_ANALOG_ON
TX_ANALOG_OFF = _spinapi.TX_ANALOG_OFF
RX_ANALOG_ON = _spinapi.RX_ANALOG_ON
RX_ANALOG_OFF = _spinapi.RX_ANALOG_OFF
CONTINUE = _spinapi.CONTINUE
STOP = _spinapi.STOP
LOOP = _spinapi.LOOP
END_LOOP = _spinapi.END_LOOP
JSR = _spinapi.JSR
RTS = _spinapi.RTS
BRANCH = _spinapi.BRANCH
LONG_DELAY = _spinapi.LONG_DELAY
WAIT = _spinapi.WAIT
RTI = _spinapi.RTI
ns = _spinapi.ns
us = _spinapi.us
ms = _spinapi.ms
MHz = _spinapi.MHz
kHz = _spinapi.kHz
Hz = _spinapi.Hz
PARAM_ERROR = _spinapi.PARAM_ERROR
MAX_PHASE_REGS = _spinapi.MAX_PHASE_REGS
MAX_FREQ_REGS = _spinapi.MAX_FREQ_REGS
class PB_OVERFLOW_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PB_OVERFLOW_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PB_OVERFLOW_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adc"] = _spinapi.PB_OVERFLOW_STRUCT_adc_set
    __swig_getmethods__["adc"] = _spinapi.PB_OVERFLOW_STRUCT_adc_get
    if _newclass:adc = _swig_property(_spinapi.PB_OVERFLOW_STRUCT_adc_get, _spinapi.PB_OVERFLOW_STRUCT_adc_set)
    __swig_setmethods__["cic"] = _spinapi.PB_OVERFLOW_STRUCT_cic_set
    __swig_getmethods__["cic"] = _spinapi.PB_OVERFLOW_STRUCT_cic_get
    if _newclass:cic = _swig_property(_spinapi.PB_OVERFLOW_STRUCT_cic_get, _spinapi.PB_OVERFLOW_STRUCT_cic_set)
    __swig_setmethods__["fir"] = _spinapi.PB_OVERFLOW_STRUCT_fir_set
    __swig_getmethods__["fir"] = _spinapi.PB_OVERFLOW_STRUCT_fir_get
    if _newclass:fir = _swig_property(_spinapi.PB_OVERFLOW_STRUCT_fir_get, _spinapi.PB_OVERFLOW_STRUCT_fir_set)
    __swig_setmethods__["average"] = _spinapi.PB_OVERFLOW_STRUCT_average_set
    __swig_getmethods__["average"] = _spinapi.PB_OVERFLOW_STRUCT_average_get
    if _newclass:average = _swig_property(_spinapi.PB_OVERFLOW_STRUCT_average_get, _spinapi.PB_OVERFLOW_STRUCT_average_set)
    def __init__(self, *args): 
        this = _spinapi.new_PB_OVERFLOW_STRUCT(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinapi.delete_PB_OVERFLOW_STRUCT
    __del__ = lambda self : None;
PB_OVERFLOW_STRUCT_swigregister = _spinapi.PB_OVERFLOW_STRUCT_swigregister
PB_OVERFLOW_STRUCT_swigregister(PB_OVERFLOW_STRUCT)

pb_count_boards = _spinapi.pb_count_boards
pb_select_board = _spinapi.pb_select_board
pb_init = _spinapi.pb_init
pb_set_clock = _spinapi.pb_set_clock
pb_close = _spinapi.pb_close
pb_start_programming = _spinapi.pb_start_programming
pb_set_freq = _spinapi.pb_set_freq
pb_set_phase = _spinapi.pb_set_phase
pb_inst_tworf = _spinapi.pb_inst_tworf
pb_inst_onerf = _spinapi.pb_inst_onerf
pb_inst_pbonly = _spinapi.pb_inst_pbonly
pb_inst_direct = _spinapi.pb_inst_direct
pb_stop_programming = _spinapi.pb_stop_programming
pb_start = _spinapi.pb_start
pb_stop = _spinapi.pb_stop
pb_outp = _spinapi.pb_outp
pb_inp = _spinapi.pb_inp
pb_outw = _spinapi.pb_outw
pb_inw = _spinapi.pb_inw
pb_set_ISA_address = _spinapi.pb_set_ISA_address
pb_get_rounded_value = _spinapi.pb_get_rounded_value
pb_read_status = _spinapi.pb_read_status
pb_read_fullStat = _spinapi.pb_read_fullStat
pb_get_version = _spinapi.pb_get_version
pb_get_error = _spinapi.pb_get_error
pb_get_firmware_id = _spinapi.pb_get_firmware_id
pb_sleep_ms = _spinapi.pb_sleep_ms
pb_set_debug = _spinapi.pb_set_debug
pb_bypass_FF_fix = _spinapi.pb_bypass_FF_fix
pb_set_defaults = _spinapi.pb_set_defaults
pb_inst_radio = _spinapi.pb_inst_radio
pb_inst_radio_shape = _spinapi.pb_inst_radio_shape
pb_set_num_points = _spinapi.pb_set_num_points
pb_set_scan_segments = _spinapi.pb_set_scan_segments
pb_scan_count = _spinapi.pb_scan_count
pb_zero_ram = _spinapi.pb_zero_ram
pb_overflow = _spinapi.pb_overflow
pb_get_data = _spinapi.pb_get_data
pb_get_data_direct = _spinapi.pb_get_data_direct
pb_write_ascii = _spinapi.pb_write_ascii
pb_write_ascii_verbose = _spinapi.pb_write_ascii_verbose
pb_write_jcamp = _spinapi.pb_write_jcamp
pb_write_felix = _spinapi.pb_write_felix
pb_setup_filters = _spinapi.pb_setup_filters
pb_setup_cic = _spinapi.pb_setup_cic
pb_load_coef_file = _spinapi.pb_load_coef_file
pb_setup_fir = _spinapi.pb_setup_fir
pb_set_radio_control = _spinapi.pb_set_radio_control
pb_unset_radio_control = _spinapi.pb_unset_radio_control
pb_set_radio_hw = _spinapi.pb_set_radio_hw
pb_set_isr = _spinapi.pb_set_isr
pb_set_irq_enable_mask = _spinapi.pb_set_irq_enable_mask
pb_set_irq_immediate_mask = _spinapi.pb_set_irq_immediate_mask
pb_generate_interrupt = _spinapi.pb_generate_interrupt
pb_write_register = _spinapi.pb_write_register
pb_inst_dds2 = _spinapi.pb_inst_dds2
pb_select_dds = _spinapi.pb_select_dds
pb_dds_load = _spinapi.pb_dds_load
pb_set_amp = _spinapi.pb_set_amp
set_clock = _spinapi.set_clock
start_programming = _spinapi.start_programming
stop_programming = _spinapi.stop_programming
start_pb = _spinapi.start_pb
stop_pb = _spinapi.stop_pb
set_freq = _spinapi.set_freq
set_phase = _spinapi.set_phase
read_status = _spinapi.read_status
TRIGGER = _spinapi.TRIGGER
PCI_READ = _spinapi.PCI_READ
BYPASS_AVERAGE = _spinapi.BYPASS_AVERAGE
NARROW_BW = _spinapi.NARROW_BW
FORCE_AVG = _spinapi.FORCE_AVG
BNC0_CLK = _spinapi.BNC0_CLK
DO_ZERO = _spinapi.DO_ZERO
BYPASS_CIC = _spinapi.BYPASS_CIC
BYPASS_FIR = _spinapi.BYPASS_FIR
BYPASS_MULT = _spinapi.BYPASS_MULT
SELECT_AUX_DDS = _spinapi.SELECT_AUX_DDS
DDS_DIRECT = _spinapi.DDS_DIRECT
SELECT_INTERNAL_DDS = _spinapi.SELECT_INTERNAL_DDS
DAC_FEEDTHROUGH = _spinapi.DAC_FEEDTHROUGH
OVERFLOW_RESET = _spinapi.OVERFLOW_RESET
RAM_DIRECT = _spinapi.RAM_DIRECT
ALL_FLAGS_ON = _spinapi.ALL_FLAGS_ON
ONE_PERIOD = _spinapi.ONE_PERIOD
TWO_PERIOD = _spinapi.TWO_PERIOD
THREE_PERIOD = _spinapi.THREE_PERIOD
FOUR_PERIOD = _spinapi.FOUR_PERIOD
FIVE_PERIOD = _spinapi.FIVE_PERIOD
SIX_PERIOD = _spinapi.SIX_PERIOD
ON = _spinapi.ON
MAX_NUM_BOARDS = _spinapi.MAX_NUM_BOARDS


